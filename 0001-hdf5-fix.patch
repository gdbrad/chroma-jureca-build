From 51d9cd9a8854bce45de80cb16a29062254636108 Mon Sep 17 00:00:00 2001
From: GioPede <giovanni.pederiva@gmail.com>
Date: Fri, 18 Aug 2023 01:49:19 -0700
Subject: [PATCH] hdf5 fix

---
 include/qdp_hdf5.h      | 40 ++++++++++++++++++++--------------------
 lib/qdp_hdf5.cc         | 38 +++++++++++++++++++-------------------
 2 files changed, 38 insertions(+), 40 deletions(-)

diff --git a/include/qdp_hdf5.h b/include/qdp_hdf5.h
index 90e82aec..ff15cc29 100644
--- a/include/qdp_hdf5.h
+++ b/include/qdp_hdf5.h
@@ -922,28 +922,28 @@ namespace QDP {
 	//template specializations:
 	//complex types
 	//single datum
-	template<>void HDF5::read< PScalar< PScalar< RComplex<float> > > >(const std::string& dataname, ComplexF& datum);
-	template<>void HDF5::read< PScalar< PScalar< RComplex<double> > > >(const std::string& dataname, ComplexD& datum);
+	template<>void HDF5::read< PScalar< PScalar< RComplex < Word <float> > > > >(const std::string& dataname, ComplexF& datum);
+	template<>void HDF5::read< PScalar< PScalar< RComplex < Word <double> > > > >(const std::string& dataname, ComplexD& datum);
 
 	//array value
-	template<>void HDF5::read< PScalar< PScalar< RComplex<float> > > >(const std::string& dataname, multi1d<ComplexF>& datum);
-	template<>void HDF5::read< PScalar< PScalar< RComplex<double> > > >(const std::string& dataname, multi1d<ComplexD>& datum);
+	template<>void HDF5::read< PScalar< PScalar< RComplex < Word <float> > > > >(const std::string& dataname, multi1d<ComplexF>& datum);
+	template<>void HDF5::read< PScalar< PScalar< RComplex < Word <double> > > > >(const std::string& dataname, multi1d<ComplexD>& datum);
 
 	//specializations for Lattice objects
-	template<>void HDF5::read< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& name, 
+	template<>void HDF5::read< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& name, 
 																				LatticeColorMatrixD3& field, 
 																				const HDF5Base::accessmode& accmode);
 	
-	template<>void HDF5::read< PSpinMatrix< PColorMatrix< RComplex<REAL32>, 3>, 4> >(const std::string& name, 
+	template<>void HDF5::read< PSpinMatrix< PColorMatrix< RComplex < Word <REAL32> >, 3>, 4> >(const std::string& name, 
 																				LatticeDiracPropagatorF3& field, 
 																				const HDF5Base::accessmode& accmode);
 																				
-	template<>void HDF5::read< PSpinMatrix< PColorMatrix< RComplex<REAL64>, 3>, 4> >(const std::string& name, 
+	template<>void HDF5::read< PSpinMatrix< PColorMatrix< RComplex < Word <REAL64> >, 3>, 4> >(const std::string& name, 
 																					LatticeDiracPropagatorD3& field, 
 																					const HDF5Base::accessmode& accmode);
 	
 	//specializations for multi1d<OLattice> objects
-	template<>void HDF5::read< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& name, 
+	template<>void HDF5::read< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& name, 
 																				multi1d<LatticeColorMatrixD3>& field, 
 																				const HDF5Base::accessmode& accmode);
 	//--------------------------------------------------------------------------------
@@ -1479,39 +1479,39 @@ namespace QDP {
 	//complex types
 	//single datum
 	template<>
-	void HDF5Writer::write< PScalar< PScalar< RComplex<float> > > >(const std::string& dataname, const ComplexF& datum, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PScalar< RComplex < Word <float> > > > >(const std::string& dataname, const ComplexF& datum, const HDF5Base::writemode& mode);
 	template<>
-	void HDF5Writer::write< PScalar< PScalar< RComplex<double> > > >(const std::string& dataname, const ComplexD& datum, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PScalar< RComplex < Word <double> > > > >(const std::string& dataname, const ComplexD& datum, const HDF5Base::writemode& mode);
 
 	//array:
 	template<>
-	void HDF5Writer::write< PScalar< PScalar< RComplex<float> > > >(const std::string& dataname, const multi1d<ComplexF>& datum, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PScalar< RComplex < Word <float> > > > >(const std::string& dataname, const multi1d<ComplexF>& datum, const HDF5Base::writemode& mode);
 	template<>
-	void HDF5Writer::write< PScalar< PScalar< RComplex<double> > > >(const std::string& dataname, const multi1d<ComplexD>& datum, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PScalar< RComplex < Word <double> > > > >(const std::string& dataname, const multi1d<ComplexD>& datum, const HDF5Base::writemode& mode);
 
 	//ColorMatrix
 	//single datum
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL32>, 3> > >(const std::string& dataname, const ColorMatrixF3& datum, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL32> >, 3> > >(const std::string& dataname, const ColorMatrixF3& datum, const HDF5Base::writemode& mode);
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& dataname, const ColorMatrixD3& datum, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& dataname, const ColorMatrixD3& datum, const HDF5Base::writemode& mode);
 
   //template specializations for OLattice<T> datatypes:
 	//LatticeColorMatrix
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL32>, 3> > >(const std::string& name, const LatticeColorMatrixF3& field, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL32> >, 3> > >(const std::string& name, const LatticeColorMatrixF3& field, const HDF5Base::writemode& mode);
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& name, const LatticeColorMatrixD3& field, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& name, const LatticeColorMatrixD3& field, const HDF5Base::writemode& mode);
   
   //LatticePropagator
   template<>
-  void HDF5Writer::write< PSpinMatrix< PColorMatrix< RComplex<REAL32>, 3>, 4> >(const std::string& name, const LatticePropagatorF3& field, const HDF5Base::writemode& mode);
+  void HDF5Writer::write< PSpinMatrix< PColorMatrix< RComplex  < Word <REAL32> >, 3>, 4> >(const std::string& name, const LatticePropagatorF3& field, const HDF5Base::writemode& mode);
 	template<>
-	void HDF5Writer::write< PSpinMatrix< PColorMatrix< RComplex<REAL64>, 3>, 4> >(const std::string& name, const LatticePropagatorD3& field, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PSpinMatrix< PColorMatrix< RComplex  < Word <REAL64> >, 3>, 4> >(const std::string& name, const LatticePropagatorD3& field, const HDF5Base::writemode& mode);
 
   //template specializations for multi1d<OLattice<T> > datatypes:
   //multi1d<LatticeColorMatrix>
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& name, const multi1d<LatticeColorMatrixD3>& field, const HDF5Base::writemode& mode);
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word < REAL64> >, 3> > >(const std::string& name, const multi1d<LatticeColorMatrixD3>& field, const HDF5Base::writemode& mode);
 }
-#endif
+#endif
\ No newline at end of file 
diff --git a/lib/qdp_hdf5.cc b/lib/qdp_hdf5.cc
index c51c1edf..b8a2007c 100644
--- a/lib/qdp_hdf5.cc
+++ b/lib/qdp_hdf5.cc
@@ -673,7 +673,7 @@ namespace QDP {
 
 	//complex types:
 	//Single element:
-	template<>void HDF5::read< PScalar< PScalar< RComplex<float> > > >(const std::string& dataname, ComplexF& datum){
+	template<>void HDF5::read< PScalar< PScalar< RComplex < Word <float> > > > >(const std::string& dataname, ComplexF& datum){
 		//get type:
 		hid_t type_id;
 		readPrepare(dataname,type_id);
@@ -695,7 +695,7 @@ namespace QDP {
 		rd(dataname,datum,H5T_COMPOUND,true,false);
 	}
 
-	template<>void HDF5::read< PScalar< PScalar< RComplex<double> > > >(const std::string& dataname, ComplexD& datum){
+	template<>void HDF5::read< PScalar< PScalar< RComplex < Word <double> > > > >(const std::string& dataname, ComplexD& datum){
 		//get type:
 		hid_t type_id;
 		readPrepare(dataname,type_id);
@@ -718,7 +718,7 @@ namespace QDP {
 	}
 
 	//array types
-	template<>void HDF5::read<  PScalar< PScalar< RComplex<float> > > >(const std::string& dataname, multi1d<ComplexF>& datum){
+	template<>void HDF5::read<  PScalar< PScalar< RComplex < Word <float> > > > >(const std::string& dataname, multi1d<ComplexF>& datum){
 		//get type:
 		hid_t type_id;
 		readPrepare(dataname,type_id);
@@ -740,7 +740,7 @@ namespace QDP {
 		rd(dataname,datum,H5T_COMPOUND,true,false);
 	}
 
-	template<>void HDF5::read< PScalar< PScalar< RComplex<double> > > >(const std::string& dataname, multi1d<ComplexD>& datum){
+	template<>void HDF5::read< PScalar< PScalar< RComplex < Word <double> > > > >(const std::string& dataname, multi1d<ComplexD>& datum){
 		//get type:
 		hid_t type_id;
 		readPrepare(dataname,type_id);
@@ -927,7 +927,7 @@ namespace QDP {
 
 
 	//read LatticeColorMatrix
-	template<>void HDF5::read< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& name, 
+	template<>void HDF5::read< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& name, 
 																				LatticeColorMatrixD3& field, 
 																				const HDF5Base::accessmode& accmode){
 		StopWatch swatch_prepare, swatch_datatypes, swatch_reorder, swatch_read;
@@ -1029,7 +1029,7 @@ namespace QDP {
 	}
 	
 	//read LatticeDiracPropagatorF3
-	template<>void HDF5::read< PSpinMatrix< PColorMatrix< RComplex<REAL32>, 3>, 4> >(const std::string& name, 
+	template<>void HDF5::read< PSpinMatrix< PColorMatrix< RComplex < Word <REAL32> >, 3>, 4> >(const std::string& name, 
 																					LatticeDiracPropagatorF3& field, 
 																					const HDF5Base::accessmode& accmode){
 		StopWatch swatch_prepare, swatch_datatypes, swatch_reorder, swatch_read;
@@ -1128,7 +1128,7 @@ namespace QDP {
 	}
 	
 	//read LatticeDiracPropagatorD3
-	template<>void HDF5::read< PSpinMatrix< PColorMatrix< RComplex<REAL64>, 3>, 4> >(const std::string& name, 
+	template<>void HDF5::read< PSpinMatrix< PColorMatrix< RComplex < Word <REAL64> >, 3>, 4> >(const std::string& name, 
 																					LatticeDiracPropagatorD3& field, 
 																					const HDF5Base::accessmode& accmode){
 		StopWatch swatch_prepare, swatch_datatypes, swatch_reorder, swatch_read;
@@ -1227,7 +1227,7 @@ namespace QDP {
 	}
 
 	//QDP Lattice IO:
-	template<>void HDF5::read< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& name, 
+	template<>void HDF5::read< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& name, 
 																				multi1d<LatticeColorMatrixD3>& fieldarray, 
 																				const HDF5Base::accessmode& accmode){
 		StopWatch swatch_prepare, swatch_datatypes, swatch_reorder, swatch_read;
@@ -1974,7 +1974,7 @@ namespace QDP {
 	//complex types:
 	//Single element:
 	template<>
-	void HDF5Writer::write< PScalar< PScalar< RComplex<float> > > >(const std::string& dataname, const ComplexF& datum, const HDF5Base::writemode& mode){
+	void HDF5Writer::write< PScalar< PScalar< RComplex < Word <float> > > > >(const std::string& dataname, const ComplexF& datum, const HDF5Base::writemode& mode){
 		hid_t type_id;
 		bool exists=objectExists(file_id,".ComplexFloat");
 		if(!exists){
@@ -1994,7 +1994,7 @@ namespace QDP {
 	}
 
 	template<>
-	void HDF5Writer::write< PScalar< PScalar< RComplex<double> > > >(const std::string& dataname, const ComplexD& datum, const HDF5Base::writemode& mode){
+	void HDF5Writer::write< PScalar< PScalar< RComplex < Word <double> > > > >(const std::string& dataname, const ComplexD& datum, const HDF5Base::writemode& mode){
 		hid_t type_id;
 		bool exists=objectExists(file_id,".ComplexDouble");
 		if(!exists){
@@ -2015,7 +2015,7 @@ namespace QDP {
 
 	//array types
 	template<>
-	void HDF5Writer::write< PScalar< PScalar< RComplex<float> > > >(const std::string& dataname, const multi1d<ComplexF>& datum, const HDF5Base::writemode& mode){
+	void HDF5Writer::write< PScalar< PScalar< RComplex < Word <float> > > > >(const std::string& dataname, const multi1d<ComplexF>& datum, const HDF5Base::writemode& mode){
 		hid_t type_id;
 		bool exists=objectExists(file_id,".ComplexFloat");
 		if(!exists){
@@ -2035,7 +2035,7 @@ namespace QDP {
 	}
 
 	template<>
-	void HDF5Writer::write< PScalar< PScalar< RComplex<double> > > >(const std::string& dataname, const multi1d<ComplexD>& datum, const HDF5Base::writemode& mode){
+	void HDF5Writer::write< PScalar< PScalar< RComplex < Word <double> > > > >(const std::string& dataname, const multi1d<ComplexD>& datum, const HDF5Base::writemode& mode){
 		hid_t type_id;
 		bool exists=objectExists(file_id,".ComplexDouble");
 		if(!exists){
@@ -2056,7 +2056,7 @@ namespace QDP {
 
 	//ColorMatrix:
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL32>, 3> > >(const std::string& dataname, const ColorMatrixF3& datum, const HDF5Base::writemode& mode){
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL32> >, 3> > >(const std::string& dataname, const ColorMatrixF3& datum, const HDF5Base::writemode& mode){
 		//first get complex type:
 		hid_t complex_id, colmat_id;
 		bool exists=objectExists(file_id,".ComplexFloat");
@@ -2090,7 +2090,7 @@ namespace QDP {
 	}
 
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& dataname, const ColorMatrixD3& datum, const HDF5Base::writemode& mode){
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& dataname, const ColorMatrixD3& datum, const HDF5Base::writemode& mode){
 		//first get complex type:
 		hid_t complex_id, colmat_id;
 		bool exists=objectExists(file_id,".ComplexDouble");
@@ -2238,7 +2238,7 @@ namespace QDP {
 
 	//float lattice color matrix:
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL32>, 3> > >(const std::string& name, const LatticeColorMatrixF3& field, const HDF5Base::writemode& mode){
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL32> >, 3> > >(const std::string& name, const LatticeColorMatrixF3& field, const HDF5Base::writemode& mode){
 		StopWatch swatch_prepare, swatch_reorder, swatch_write, swatch_datatypes;
 	  
 		//before writing is performed, check if dataset exists:
@@ -2311,7 +2311,7 @@ namespace QDP {
 
 	//double lattice color matrix:
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& name, const LatticeColorMatrixD3& field, const HDF5Base::writemode& mode)
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& name, const LatticeColorMatrixD3& field, const HDF5Base::writemode& mode)
 	{
 		StopWatch swatch_prepare, swatch_reorder, swatch_write, swatch_datatypes;
 	  
@@ -2385,7 +2385,7 @@ namespace QDP {
 	
 	//float lattice propagator:
 	template<>
-	void HDF5Writer::write< PSpinMatrix< PColorMatrix< RComplex<REAL32>, 3>, 4> >(const std::string& name, const LatticePropagatorF3& field, const HDF5Base::writemode& mode){
+	void HDF5Writer::write< PSpinMatrix< PColorMatrix< RComplex < Word <REAL32> >, 3>, 4> >(const std::string& name, const LatticePropagatorF3& field, const HDF5Base::writemode& mode){
 		StopWatch swatch_prepare, swatch_reorder, swatch_write, swatch_datatypes;
         QDPIO::cout << "\t USING LatticePropagatorF3 writer" << std::endl;
 		//before writing is performed, check if dataset exists:
@@ -2469,7 +2469,7 @@ namespace QDP {
 	
 	//double lattice propagator:
 	template<>
-	void HDF5Writer::write< PSpinMatrix< PColorMatrix< RComplex<REAL64>, 3>, 4> >(const std::string& name, const LatticePropagatorD3& field, const HDF5Base::writemode& mode)
+	void HDF5Writer::write< PSpinMatrix< PColorMatrix< RComplex < Word <REAL64> >, 3>, 4> >(const std::string& name, const LatticePropagatorD3& field, const HDF5Base::writemode& mode)
 	{
 		StopWatch swatch_prepare, swatch_reorder, swatch_write, swatch_datatypes;
 	  
@@ -2554,7 +2554,7 @@ namespace QDP {
 
 	//write chroma configuration:
 	template<>
-	void HDF5Writer::write< PScalar< PColorMatrix< RComplex<REAL64>, 3> > >(const std::string& name, const multi1d<LatticeColorMatrixD3>& field, const HDF5Base::writemode& mode)
+	void HDF5Writer::write< PScalar< PColorMatrix< RComplex < Word <REAL64> >, 3> > >(const std::string& name, const multi1d<LatticeColorMatrixD3>& field, const HDF5Base::writemode& mode)
 	{
 		StopWatch swatch_prepare, swatch_reorder, swatch_write, swatch_datatypes;
 	  
-- 
2.35.3

